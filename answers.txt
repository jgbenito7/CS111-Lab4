# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Joey Gomez-Benito 
Student ID: 904140064
Email: jgbenito7@gmail.com

# Partner 2 (if you're working in a team)
Name: Patrick Killian Jackson
Student ID: 504184347
Email: killianjackson@yahoo.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We used the fork() system call to have processes run in parallel. We placed this call inside of the 
for loop in the download and upload part of the main function so that there would be one one child 
process per instance of downloading or uploading.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

The use of strcpy has the potential to be unsafe due to the possibility of a buffer overrun. We changed this to 
strncpy and set FILENAMESIZ to be the max amount of bytes able to be copied over. 

We also added a second check in both start_download and task_upload to exit with an error message if the filename length is greater than FILENAMESIZ.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

We fixed the possibility of peers serving files outside of the current directory. We did this by looking for 
a '/' in the filename. 

We increased the size of the task buffer to add support for larger tasks.

We added a global variable, MAXFILESIZE, for the maximum size of a file that can be uploaded or downloaded. We set MAXFILESIZE to 1MB. In the functions task_download and task_upload, we added checks as we read from the task buffer/disk and write to the task buffer/disk to make sure the total_written is less than or equal to MAXFILESIZE. If the file size is too big, we exit with an error message. 

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

We first implemented a buffer overrun attack. We did this by creating a file that reads "You have been attacked!!!\n" over and over. 
This has the potential to cause an overrun if the connecting peer did not place a limit on how many bytes could be copied. This has the potential
to be dangerous because an attacker could overwrite the return pointer and execute code contained in the passed string. Also, even if this does not cause a buffer overrun, this attack also uploads to the peer a file full of useless text instead of the file the peer requested.

Next we implemented a simple infinite write stream while uploading a file. This could be dangerous because it could fill up the peer's hard disk
data and potentially crash their computer. 

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
